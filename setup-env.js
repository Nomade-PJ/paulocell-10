/**
 * Script para configurar o ambiente de produ√ß√£o
 * Copia o arquivo .env.production para .env quando em ambiente de produ√ß√£o
 */

const fs = require('fs');
const path = require('path');

// Fun√ß√£o principal para configurar o ambiente
async function setupEnvironment() {
  console.log('=== Configurando ambiente do sistema Paulo Cell ===');
  
  // Detectar ambiente
  const isProduction = process.env.NODE_ENV === 'production';
  console.log(`Ambiente detectado: ${isProduction ? 'Produ√ß√£o' : 'Desenvolvimento'}`);
  
  // Caminhos dos arquivos
  const rootDir = process.cwd();
  const sourceEnvFile = path.join(rootDir, '.env.production');
  const targetEnvFile = path.join(rootDir, '.env');
  
  if (isProduction) {
    try {
      // Verificar se o arquivo .env.production existe
      if (!fs.existsSync(sourceEnvFile)) {
        console.error(`‚ùå Arquivo ${sourceEnvFile} n√£o encontrado!`);
        process.exit(1);
      }
      
      // Ler o arquivo .env.production
      const envContent = fs.readFileSync(sourceEnvFile, 'utf8');
      
      // Escrever no arquivo .env
      fs.writeFileSync(targetEnvFile, envContent);
      
      console.log('‚úÖ Arquivo .env atualizado com as configura√ß√µes de produ√ß√£o');
      console.log(`üìã Configura√ß√µes aplicadas de: ${sourceEnvFile}`);
      console.log(`üìã Configura√ß√µes salvas em: ${targetEnvFile}`);
    } catch (error) {
      console.error('‚ùå Erro ao configurar ambiente:', error);
      process.exit(1);
    }
  } else {
    console.log('‚ÑπÔ∏è Ambiente de desenvolvimento detectado. Nenhuma altera√ß√£o realizada.');
  }
  
  console.log('=== Configura√ß√£o de ambiente conclu√≠da ===');
}

// Executar a fun√ß√£o principal
setupEnvironment(); 