/**
 * Configura√ß√µes da aplica√ß√£o
 * Centraliza todas as vari√°veis de ambiente e configura√ß√µes do sistema
 */

// Importa dotenv para carregar vari√°veis de ambiente
import dotenv from 'dotenv';
import path from 'path';
import fs from 'fs';

// Determinar o ambiente
const NODE_ENV = process.env.NODE_ENV || 'development';

// Carregar o arquivo de ambiente adequado
function loadEnvConfig() {
  try {
    // Tentar carregar .env.production primeiro em ambiente de produ√ß√£o
    if (NODE_ENV === 'production') {
      const prodEnvPath = path.resolve(process.cwd(), '.env.production');
      
      if (fs.existsSync(prodEnvPath)) {
        console.log('üìã Carregando configura√ß√µes de produ√ß√£o (.env.production)');
        dotenv.config({ path: prodEnvPath });
        return true;
      } else {
        console.warn('‚ö†Ô∏è Arquivo .env.production n√£o encontrado');
      }
    }
    
    // Fallback para o arquivo .env padr√£o
    const defaultEnvPath = path.resolve(process.cwd(), '.env');
    
    if (fs.existsSync(defaultEnvPath)) {
      console.log('üìã Carregando configura√ß√µes de ambiente (.env)');
      dotenv.config({ path: defaultEnvPath });
      return true;
    } else {
      console.warn('‚ö†Ô∏è Arquivo .env n√£o encontrado');
    }
    
    // Se nenhum arquivo for encontrado, carrega sem path
    dotenv.config();
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao carregar arquivo de ambiente:', error);
    return false;
  }
}

// Executar carregamento de configura√ß√£o
loadEnvConfig();

const config = {
  // Configura√ß√µes do servidor
  PORT: process.env.PORT || 3000,
  NODE_ENV,
  
  // Configura√ß√µes de autentica√ß√£o
  JWT_SECRET: process.env.JWT_SECRET || 'paulocell-secret-key-change-in-production',
  JWT_EXPIRATION: process.env.JWT_EXPIRATION || '24h',
  
  // Configura√ß√µes do MongoDB
  MONGODB_URI: process.env.MONGODB_URI || 'mongodb://localhost:27017/paulocell',
  
  // Configura√ß√µes de WebSocket
  WS_PORT: process.env.WS_PORT || 3001,
  
  // Configura√ß√µes de CORS
  CORS_ORIGIN: process.env.CORS_ORIGIN || '*',
  
  // Flag para habilitar logs detalhados
  DEBUG: process.env.DEBUG === 'true',
  
  // Configura√ß√µes de rate limiting para preven√ß√£o de ataques
  RATE_LIMIT: {
    windowMs: 15 * 60 * 1000, // 15 minutos
    max: 100 // limite de 100 requisi√ß√µes por IP
  },
  
  // Timeout de conex√£o para opera√ß√µes de banco de dados (ms)
  DB_TIMEOUT: 10000,
};

export default config; 