/**
 * Configura√ß√£o e gerenciamento de conex√£o com o banco de dados.
 * Este m√≥dulo suporta diferentes tipos de conex√£o:
 * - Prisma: ORM para conex√£o com PostgreSQL ou MongoDB
 * - Mongoose: ODM para conex√£o com MongoDB
 */

import config from './config.js';
import prismaClient from './prisma-client';

// Configura√ß√£o do banco de dados baseada nas vari√°veis de ambiente do config centralizado
const DB_TYPE = config.DB_TYPE || 'prisma';
const DB_INIT_KEY = config.DB_INIT_KEY || 'default-key-insecure';

// Inst√¢ncia do cliente de banco de dados (ser√° inicializada sob demanda)
let dbClientInstance = null;

/**
 * Obt√©m o cliente de banco de dados, inicializando-o se necess√°rio
 * @returns {Object} Cliente de banco de dados configurado
 */
export async function getDbClient() {
  // Se j√° foi inicializado, retorna a inst√¢ncia existente
  if (dbClientInstance) {
    return dbClientInstance;
  }

  console.log(`üîå Inicializando conex√£o de banco de dados (tipo: ${DB_TYPE})...`);

  // Inicializa o cliente de banco de dados com base no tipo configurado
  try {
    switch (DB_TYPE) {
      case 'prisma':
        // Verifica a conex√£o com o banco de dados via Prisma
        await prismaClient.checkConnection();
        dbClientInstance = prismaClient;
        console.log('‚úÖ Conex√£o estabelecida com Prisma');
        break;

      case 'mongoose':
        // Verificar a conex√£o com MongoDB via Mongoose
        const mongooseModule = await import('./mongoose-client.js');
        await mongooseModule.default.checkConnection();
        dbClientInstance = mongooseModule.default;
        console.log('‚úÖ Conex√£o estabelecida com MongoDB (Mongoose)');
        break;

      default:
        console.warn(`‚ö†Ô∏è Tipo de banco de dados desconhecido: ${DB_TYPE}. Usando Prisma como padr√£o.`);
        await prismaClient.checkConnection();
        dbClientInstance = prismaClient;
        break;
    }

    return dbClientInstance;
  } catch (error) {
    console.error('‚ùå Erro ao inicializar conex√£o com banco de dados:', error);
    throw new Error(`Falha ao conectar ao banco de dados: ${error.message}`);
  }
}

/**
 * Inicializa o banco de dados, criando tabelas e estruturas necess√°rias
 * @param {string} initKey Chave de inicializa√ß√£o para autorizar a opera√ß√£o
 */
export async function initializeDatabase(initKey) {
  // Verificar chave de seguran√ßa
  if (initKey !== DB_INIT_KEY) {
    throw new Error('Chave de inicializa√ß√£o inv√°lida');
  }

  try {
    const dbClient = await getDbClient();

    // Dependendo do tipo de banco, inicializa as estruturas adequadas
    if (DB_TYPE === 'prisma') {
      await prismaClient.initializeDatabase();
    } else if (DB_TYPE === 'mongoose') {
      const mongooseModule = await import('./mongoose-client.js');
      await mongooseModule.default.initializeDatabase();
    }

    return { success: true };
  } catch (error) {
    console.error('‚ùå Erro ao inicializar banco de dados:', error);
    throw new Error(`Falha ao inicializar estruturas do banco: ${error.message}`);
  }
}

/**
 * Verifica se a conex√£o com o banco de dados est√° ativa
 * @returns {Object} Status da conex√£o
 */
export async function checkDatabaseConnection() {
  try {
    const dbClient = await getDbClient();
    
    let connectionStatus = {};
    
    // Verificar status espec√≠fico por tipo de banco
    if (DB_TYPE === 'prisma') {
      connectionStatus = {
        connected: true,
        type: 'PostgreSQL/MySQL via Prisma',
        message: 'Conex√£o com Prisma estabelecida com sucesso',
      };
    } else if (DB_TYPE === 'mongoose') {
      connectionStatus = {
        connected: true,
        type: 'MongoDB via Mongoose',
        message: 'Conex√£o com MongoDB estabelecida com sucesso',
      };
    }
    
    return connectionStatus;
  } catch (error) {
    console.error('‚ùå Erro ao verificar conex√£o:', error);
    return {
      connected: false,
      error: error.message,
      details: error.stack
    };
  }
}

export default {
  getDbClient,
  initializeDatabase,
  checkDatabaseConnection
};