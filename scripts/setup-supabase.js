/**
 * Script para configurar o Supabase ap√≥s a instala√ß√£o
 * 
 * Este script auxilia na configura√ß√£o inicial do Supabase:
 * 1. Verifica se o Supabase est√° acess√≠vel
 * 2. Cria os buckets de armazenamento necess√°rios
 * 3. Executa o script SQL para criar as tabelas
 */

require('dotenv').config({ path: '.env.production' });
const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');
const readline = require('readline');

// Criar interface para leitura de input do usu√°rio
const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

// Configura√ß√µes
const SUPABASE_URL = process.env.SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;
const SQL_SCHEMA_PATH = path.join(__dirname, '..', 'docs', 'supabase-schema.sql');

// Verificar configura√ß√µes necess√°rias
if (!SUPABASE_URL || !SUPABASE_SERVICE_KEY) {
  console.error('‚ùå As vari√°veis de ambiente SUPABASE_URL e SUPABASE_SERVICE_ROLE_KEY s√£o obrigat√≥rias.');
  process.exit(1);
}

// Criar cliente do Supabase (usando chave de servi√ßo para acesso administrativo)
const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

// Fun√ß√£o para verificar conex√£o
const checkConnection = async () => {
  try {
    console.log('üîÑ Verificando conex√£o com Supabase...');
    const { data, error } = await supabase.auth.getUser();
    
    if (error) {
      throw new Error(`Falha na conex√£o: ${error.message}`);
    }
    
    console.log('‚úÖ Conex√£o com Supabase estabelecida com sucesso!');
    return true;
  } catch (error) {
    console.error(`‚ùå Erro ao conectar com Supabase: ${error.message}`);
    return false;
  }
};

// Fun√ß√£o para criar buckets de armazenamento
const createStorageBuckets = async () => {
  const buckets = [
    'profile-images',
    'product-images',
    'documents',
    'temp'
  ];
  
  try {
    console.log('üîÑ Criando buckets de armazenamento...');
    
    // Verificar quais buckets j√° existem
    const { data: existingBuckets, error: listError } = await supabase.storage.listBuckets();
    
    if (listError) {
      throw new Error(`Erro ao listar buckets: ${listError.message}`);
    }
    
    const existingBucketNames = existingBuckets.map(b => b.name);
    
    // Criar buckets que n√£o existem
    for (const bucketName of buckets) {
      if (existingBucketNames.includes(bucketName)) {
        console.log(`‚ÑπÔ∏è Bucket '${bucketName}' j√° existe.`);
        continue;
      }
      
      const { data, error } = await supabase.storage.createBucket(bucketName, {
        public: false,
      });
      
      if (error) {
        console.error(`‚ùå Erro ao criar bucket '${bucketName}': ${error.message}`);
      } else {
        console.log(`‚úÖ Bucket '${bucketName}' criado com sucesso!`);
        
        // Configurar pol√≠ticas de acesso para o bucket
        await supabase.storage.from(bucketName).setPublicAccessible(true);
      }
    }
    
    console.log('‚úÖ Configura√ß√£o de armazenamento conclu√≠da!');
    return true;
  } catch (error) {
    console.error(`‚ùå Erro ao configurar buckets de armazenamento: ${error.message}`);
    return false;
  }
};

// Fun√ß√£o para executar script SQL (apenas orienta√ß√µes, n√£o executa diretamente)
const setupDatabase = async () => {
  try {
    console.log('üîÑ Verificando script SQL...');
    
    if (!fs.existsSync(SQL_SCHEMA_PATH)) {
      throw new Error(`Arquivo de schema SQL n√£o encontrado em: ${SQL_SCHEMA_PATH}`);
    }
    
    const sqlContent = fs.readFileSync(SQL_SCHEMA_PATH, 'utf8');
    
    console.log('\nüìã INSTRU√á√ïES PARA CONFIGURAR O BANCO DE DADOS:');
    console.log('1. Acesse o painel do Supabase em ' + SUPABASE_URL);
    console.log('2. V√° para a se√ß√£o "SQL Editor" no menu lateral');
    console.log('3. Crie uma nova consulta');
    console.log('4. Cole o conte√∫do do arquivo docs/supabase-schema.sql');
    console.log('5. Execute o script SQL');
    
    return new Promise((resolve) => {
      rl.question('\nVoc√™ j√° executou o script SQL? (s/n): ', (answer) => {
        if (answer.toLowerCase() === 's') {
          console.log('‚úÖ Configura√ß√£o do banco de dados conclu√≠da!');
          resolve(true);
        } else {
          console.log('‚ÑπÔ∏è Por favor, execute o script SQL antes de prosseguir.');
          resolve(false);
        }
      });
    });
  } catch (error) {
    console.error(`‚ùå Erro ao configurar banco de dados: ${error.message}`);
    return false;
  }
};

// Fun√ß√£o principal
const setupSupabase = async () => {
  try {
    console.log('üöÄ Iniciando configura√ß√£o do Supabase...\n');
    
    // Verificar conex√£o
    const connected = await checkConnection();
    if (!connected) {
      throw new Error('Falha na conex√£o com Supabase. Verifique as credenciais.');
    }
    
    // Criar buckets de armazenamento
    const bucketsCreated = await createStorageBuckets();
    if (!bucketsCreated) {
      console.warn('‚ö†Ô∏è Configura√ß√£o de armazenamento incompleta.');
    }
    
    // Configura√ß√£o do banco de dados (orienta√ß√µes)
    const dbSetup = await setupDatabase();
    
    console.log('\nüìã RESUMO DA CONFIGURA√á√ÉO:');
    console.log(`- Conex√£o com Supabase: ${connected ? '‚úÖ' : '‚ùå'}`);
    console.log(`- Buckets de armazenamento: ${bucketsCreated ? '‚úÖ' : '‚ö†Ô∏è'}`);
    console.log(`- Configura√ß√£o do banco de dados: ${dbSetup ? '‚úÖ' : '‚ö†Ô∏è'}`);
    
    console.log('\nüîç PR√ìXIMOS PASSOS:');
    console.log('1. Execute "npm run check:supabase" para verificar a configura√ß√£o');
    console.log('2. Teste o aplicativo com "USE_SUPABASE=true npm start"');
    console.log('3. Para habilitar permanentemente o Supabase, edite o arquivo .env.production');
    
    console.log('\n‚úÖ Configura√ß√£o conclu√≠da!');
    rl.close();
  } catch (error) {
    console.error(`‚ùå Erro durante a configura√ß√£o: ${error.message}`);
    rl.close();
    process.exit(1);
  }
};

// Executar script
setupSupabase(); 