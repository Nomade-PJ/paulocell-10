/**
 * Script para remover arquivos legados ap√≥s a migra√ß√£o para Supabase
 * 
 * ATEN√á√ÉO: Execute este script somente ap√≥s confirmar que o sistema 
 * est√° funcionando corretamente com o Supabase.
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Verificar se o Supabase est√° ativado
require('dotenv').config({ path: '.env.production' });
const useSupabase = process.env.USE_SUPABASE === 'true';

if (!useSupabase) {
  console.error('‚ö†Ô∏è AVISO: Supabase n√£o est√° ativado no arquivo .env.production.');
  console.error('Defina USE_SUPABASE=true antes de executar este script.');
  process.exit(1);
}

// Confirmar antes de prosseguir
const readline = require('readline').createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('üßπ Script de limpeza de arquivos legados');
console.log('Este script ir√° remover arquivos relacionados ao MongoDB que n√£o s√£o mais necess√°rios.');
console.log('‚ö†Ô∏è ATEN√á√ÉO: Certifique-se de que a migra√ß√£o para o Supabase est√° conclu√≠da e funcionando.');

readline.question('\n‚ùì Tem certeza que deseja continuar? Esta a√ß√£o n√£o pode ser desfeita. (s/n): ', (answer) => {
  if (answer.toLowerCase() !== 's') {
    console.log('Opera√ß√£o cancelada pelo usu√°rio.');
    readline.close();
    process.exit(0);
  }
  
  // Lista de arquivos a serem removidos
  const filesToRemove = [
    'api/db-initialize.js',
    'api/debug-database.js',
    'src/services/realtimeService.js',
    'models/mongoose.js',
    'src/services/api.js',
  ];
  
  // Verificar se existem arquivos de configura√ß√£o MongoDB
  const configFilesToCheck = [
    'mongo-setup.js',
    'mongoDB.config.js'
  ];
  
  // Adicionar arquivos de configura√ß√£o se existirem
  for (const configFile of configFilesToCheck) {
    if (fs.existsSync(path.join(process.cwd(), configFile))) {
      filesToRemove.push(configFile);
    }
  }
  
  console.log('\nüîç Arquivos que ser√£o removidos:');
  filesToRemove.forEach(file => console.log(`- ${file}`));
  
  readline.question('\n‚ùì Confirmar exclus√£o destes arquivos? (s/n): ', (confirmation) => {
    if (confirmation.toLowerCase() !== 's') {
      console.log('Opera√ß√£o cancelada pelo usu√°rio.');
      readline.close();
      process.exit(0);
    }
    
    // Fazer backup antes de excluir
    try {
      const backupDir = path.join(process.cwd(), 'backup-mongodb');
      if (!fs.existsSync(backupDir)) {
        fs.mkdirSync(backupDir, { recursive: true });
      }
      
      console.log('\nüì¶ Criando backup dos arquivos...');
      filesToRemove.forEach(file => {
        const sourcePath = path.join(process.cwd(), file);
        if (fs.existsSync(sourcePath)) {
          const fileName = path.basename(file);
          const destPath = path.join(backupDir, fileName);
          fs.copyFileSync(sourcePath, destPath);
          console.log(`‚úÖ Backup criado: ${destPath}`);
        }
      });
      
      // Remover arquivos
      console.log('\nüóëÔ∏è Removendo arquivos...');
      filesToRemove.forEach(file => {
        const filePath = path.join(process.cwd(), file);
        if (fs.existsSync(filePath)) {
          fs.unlinkSync(filePath);
          console.log(`‚úÖ Removido: ${file}`);
        } else {
          console.log(`‚ö†Ô∏è Arquivo n√£o encontrado: ${file}`);
        }
      });
      
      console.log('\n‚úÖ Limpeza conclu√≠da com sucesso!');
      console.log('Um backup dos arquivos removidos foi criado em: ' + backupDir);
      
      // Perguntar se deseja fazer commit das altera√ß√µes
      readline.question('\n‚ùì Deseja fazer commit das altera√ß√µes? (s/n): ', (commitAnswer) => {
        if (commitAnswer.toLowerCase() === 's') {
          try {
            console.log('\nüìù Realizando commit das altera√ß√µes...');
            execSync('git add .', { stdio: 'inherit' });
            execSync('git commit -m "Limpeza ap√≥s migra√ß√£o para Supabase"', { stdio: 'inherit' });
            console.log('‚úÖ Commit realizado com sucesso!');
            
            readline.question('\n‚ùì Deseja enviar as altera√ß√µes para o reposit√≥rio remoto? (s/n): ', (pushAnswer) => {
              if (pushAnswer.toLowerCase() === 's') {
                try {
                  console.log('\nüì§ Enviando altera√ß√µes para o reposit√≥rio remoto...');
                  execSync('git push origin main', { stdio: 'inherit' });
                  console.log('‚úÖ Altera√ß√µes enviadas com sucesso!');
                } catch (error) {
                  console.error('‚ùå Erro ao enviar altera√ß√µes:', error.message);
                }
                readline.close();
              } else {
                console.log('Opera√ß√£o de push cancelada pelo usu√°rio.');
                readline.close();
              }
            });
          } catch (error) {
            console.error('‚ùå Erro ao fazer commit:', error.message);
            readline.close();
          }
        } else {
          console.log('Opera√ß√£o de commit cancelada pelo usu√°rio.');
          readline.close();
        }
      });
    } catch (error) {
      console.error('‚ùå Erro durante o processo de limpeza:', error);
      readline.close();
      process.exit(1);
    }
  });
}); 