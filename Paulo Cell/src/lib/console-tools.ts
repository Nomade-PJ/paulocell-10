/**
 * Ferramentas para serem usadas no console do navegador
 * Para usar, abra o console (F12) e digite:
 * PauloCellTools.resetAllStats()
 */

import { resetAllStatistics, resetVisualStatistics } from './reset-stats';

// Objeto global que ser√° exposto no console
export const PauloCellTools = {
  /**
   * Reinicializa todas as estat√≠sticas
   */
  resetAllStats: () => {
    console.log('Reinicializando todas as estat√≠sticas...');
    const success = resetAllStatistics();
    if (success) {
      console.log('%c ‚úÖ Todas as estat√≠sticas foram reinicializadas com sucesso!', 'color: green; font-weight: bold');
      console.log('Recarregue a p√°gina para ver as mudan√ßas.');
      return true;
    } else {
      console.error('‚ùå Erro ao reinicializar estat√≠sticas');
      return false;
    }
  },

  /**
   * Reinicializa apenas as estat√≠sticas visuais
   */
  resetVisualStats: () => {
    console.log('Reinicializando estat√≠sticas visuais...');
    const success = resetVisualStatistics();
    if (success) {
      console.log('%c ‚úÖ Estat√≠sticas visuais reinicializadas com sucesso!', 'color: green; font-weight: bold');
      console.log('Recarregue a p√°gina para ver as mudan√ßas.');
      return true;
    } else {
      console.error('‚ùå Erro ao reinicializar estat√≠sticas visuais');
      return false;
    }
  },

  /**
   * Mostra todas as estat√≠sticas atuais (para debug)
   */
  showAllStats: () => {
    try {
      const allStats = localStorage.getItem('pauloCell_statistics');
      if (allStats) {
        console.log('üìä Estat√≠sticas atuais:');
        console.log(JSON.parse(allStats));
      } else {
        console.log('Nenhuma estat√≠stica encontrada.');
      }
    } catch (error) {
      console.error('Erro ao mostrar estat√≠sticas:', error);
    }
  }
};

// Exp√µe as ferramentas globalmente
if (typeof window !== 'undefined') {
  (window as any).PauloCellTools = PauloCellTools;
}

export default PauloCellTools; 